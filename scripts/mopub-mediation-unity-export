#!/usr/bin/env bash
my_dir="$(dirname "$0")"
source "$my_dir/validate.sh"

# ==================================================== #
# Exports each of the third-party network adapters     #
# ==================================================== #

# The MoPub Unity SDK package to compile adapters with
MOPUB_UNITY_PACKAGE="$PWD/unity-packages/MoPubUnity.unitypackage"

# The desired Unity Editor to export packages with
UNITY_BIN=/Applications/Unity/Unity.app/Contents/MacOS/Unity

# Networks this script can package
NETWORKS_TO_EXPORT=( 
    AdColony
    AdMob
    AppLovin 
    Chartboost
    FacebookAudienceNetwork
    Flurry 
    IronSource
    OnebyAOL
    Tapjoy
    UnityAds
    Vungle
)

# Initial default package version
UNITY_PACKAGE_VERSION=1.0.0

PROJECT_PATH="$PWD/export-project"
MOPUB_MEDIATION_UNITY_ROOT=Assets/MoPub/Mediation
NETWORK_INSTALLERS_DIR="$PWD/mopub-unity-adapters"
OUT_DIR="$PWD/unity-packages"
IOS_MEDIATION_DIR=mopub-ios-mediation
ANDROID_MEDIATION_DIR=mopub-android-mediation
UNITY_MEDIATION_DIR=mopub-unity-adapters
LOG_PREFIX="[MoPub Script] "

VERSION_FOR_UNITY_ADAPTER_FORMAT="[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}"

function read_new_version {
    msg=$1
    var=$2
    echo $msg
    read -p "New version: [${!var}] " new_version
    [ -z "$new_version" ] && new_version="${!var}"
    echo "$new_version" | grep -E -q "^$VERSION_FOR_UNITY_ADAPTER_FORMAT$" \
        || abort "Version $new_version needs to be in the format $VERSION_FOR_UNITY_ADAPTER_FORMAT"
    eval "$var='$new_version'"
}

function abort {
    echo "$1"
    echo "Aborting!"
    exit 1
}

# Display welcome/confirmation message
# Title generated by: http://patorjk.com/software/taag/ (Small and Speed)
WELCOME="
  __  __     ___      _      __  __        _ _      _   _          
 |  \/  |___| _ \_  _| |__  |  \/  |___ __| (_)__ _| |_(_)___ _ _  
 | |\/| / _ \  _/ || | '_ \ | |\/| / -_) _\` | / _\` |  _| / _ \ ' \ 
 |_|  |_\___/_|  \_,_|_.__/ |_|  |_\___\__,_|_\__,_|\__|_\___/_||_| 
_____  __      __________             __________                           _____ 
__  / / /_________(_)_  /_____  __    ___  ____/___  ________________________  /_
_  / / /__  __ \_  /_  __/_  / / /    __  __/  __  |/_/__  __ \  __ \_  ___/  __/
/ /_/ / _  / / /  / / /_ _  /_/ /     _  /___  __>  < __  /_/ / /_/ /  /   / /_  
\____/  /_/ /_//_/  \__/ _\__, /      /_____/  /_/|_| _  .___/\____//_/    \__/  
                         /____/                       /_/                       
"
echo "$WELCOME"
printf "This script will generate a new Unity package for the desired network.\n\n"
echo "Select one of the options below to continue..."

PS3='Your choice: '
options=(
    "Update Android and iOS Mediation submodules and continue"
    "Continue without updating submodules"
    "Dry run"
)
select opt in "${options[@]}" "Abort and exit"; do
    case "$REPLY" in
        1 ) printf "\n${LOG_PREFIX}Updating submodules...\n"
            git submodule update --recursive --remote
            printf "$LOG_PREFIX...done updating submodules!\n"
            break;;
        2 ) printf "\nContinuing without updating submodules...\n"
            break;;
        3 ) printf "\nContinuing with a dry run...\n"
            DRY_RUN=true
            break;;
        $(( ${#options[@]}+1 )) ) echo "Goodbye!"
            exit;;
        * ) echo "Invalid option. Try another one."
            continue;;
    esac
done


printf "\nWhich network do you want to update?\n"
select opt in "${NETWORKS_TO_EXPORT[@]}" All Missing; do
    SELECTED_NETWORK="$opt"
    case "$SELECTED_NETWORK" in
        "" ) echo "Invalid option. Try another one."
             continue;;
        All | Missing )
             break;;
        * )  NETWORKS_TO_EXPORT=( $opt )
             break;;
    esac
    break
done
printf "\nSelected network: $SELECTED_NETWORK\n"

printf "\nWhat type of unitypackage do you want?\n"
options=(
    "Prod:  references public repo platform adapters"
    "Stage: bundles private repo platform adapters"
)
select opt in "${options[@]}" "Abort and exit"; do
    case "$REPLY" in
    	1) MODE=prod; break;;
        2) MODE=stage
           IOS_MEDIATION_DIR="ios-mediation"
           ANDROID_MEDIATION_DIR="android-mediation"
           break;;
        $(( ${#options[@]}+1 )) ) echo "Goodbye!"; exit 0;;
        *) echo "Invalid option. Try another one.";continue;;
    esac
done

if [ "$SELECTED_NETWORK" = All ]; then
    message="What package version do you want to give ALL Unity packages?"
    read_new_version "$message" UNITY_PACKAGE_VERSION
    if [ "$DRY_RUN" != true ]; then
        printf "\nAbout to export Unity packages for ALL NETWORKS with version $UNITY_PACKAGE_VERSION\n"
        read -p "Press 'Enter' to continue or 'Ctrl-C' to abort."
    fi
fi

for NETWORK in "${NETWORKS_TO_EXPORT[@]}"; do
    if [ -z "$NETWORK" ]; then continue; fi

    # Gather necessary values
    NETWORK_ADAPTERS_NAME="MoPub-$NETWORK-Adapters"
    NETWORK_ADAPTERS_NAME_LOWERCASE=$(echo "$NETWORK_ADAPTERS_NAME" | tr '[:upper:]' '[:lower:]')

    IOS_ADAPTER_DIR="$IOS_MEDIATION_DIR/$NETWORK"
    IOS_EXPORT_DIR="$MOPUB_MEDIATION_UNITY_ROOT/$NETWORK/Adapter/iOS"
    IOS_PODSPEC_FILE="$IOS_ADAPTER_DIR/MoPub-$NETWORK-PodSpecs/$NETWORK_ADAPTERS_NAME.podspec"
    IOS_ADAPTER_VERSION=$(sed -n -e "/s\.version/s/^.*'\([.0-9]*\)'.*/\1/p" "$IOS_PODSPEC_FILE")
    if [ -z "$IOS_ADAPTER_VERSION" ]; then
        abort "FATAL: Unable to read current $NETWORK adapter version from $IOS_PODSPEC_FILE"
    fi
    IOS_SDK_VERSION="${IOS_ADAPTER_VERSION%.*}"
    if [ "$MODE" = prod ]; then
    	IOS_ADAPTER_SPEC="version=\"$IOS_ADAPTER_VERSION\""
    else
    	IOS_ADAPTER_SPEC="path=\"$IOS_EXPORT_DIR\""
    fi

    # Get most recently built jar for this network
    ANDROID_ADAPTER_JAR=$(ls -t "$ANDROID_MEDIATION_DIR/libs/$NETWORK_ADAPTERS_NAME_LOWERCASE"-*.jar 2>/dev/null | head -n 1)
    if [ ! -f "$ANDROID_ADAPTER_JAR" ]; then
        abort "FATAL: Could not find JAR for $NETWORK adapter"
    fi
    ANDROID_EXPORT_DIR="$MOPUB_MEDIATION_UNITY_ROOT/$NETWORK/Adapter/Android"
    jarfile=${ANDROID_ADAPTER_JAR##*-}
    ANDROID_ADAPTER_VERSION=${jarfile%.jar}
    ANDROID_SDK_VERSION="${ANDROID_ADAPTER_VERSION%.*}"

    UNITY_SCRIPTS_DIR="$UNITY_MEDIATION_DIR/$NETWORK"
    UNITY_SCRIPTS_EXPORT_DIR="$MOPUB_MEDIATION_UNITY_ROOT/$NETWORK/Editor"
    UNITY_ADAPTER_CONFIG_FILE="${NETWORK}PackageConfig.cs"
    UNITY_ADAPTER_DEPS_FILE="${NETWORK}Dependencies.xml"
    NETWORK_VERSION_SUFFIX="Android.$ANDROID_ADAPTER_VERSION-iOS.$IOS_ADAPTER_VERSION"
    existing_unity_package=$(ls -t "$OUT_DIR/$NETWORK_ADAPTERS_NAME-$MODE"-*-"$NETWORK_VERSION_SUFFIX.unitypackage" 2>/dev/null | head -n 1)
    if [ ! -z "$existing_unity_package" -a "$SELECTED_NETWORK" = Missing ]; then
        echo "Found existing package:" ${existing_unity_package##*/}
        continue
    fi

    if [ "$SELECTED_NETWORK" != All ]; then
        echo "Platform adapter versions:"
        printf "> Android:  $ANDROID_ADAPTER_VERSION\n"
        printf "> iOS:      $IOS_ADAPTER_VERSION\n"
        echo "Existing packages:"
        ls -t "$OUT_DIR/$NETWORK_ADAPTERS_NAME-$MODE"-*".unitypackage" 2>/dev/null | sed -e 's#.*/#> #'
        message="What Unity package version are you exporting now?"
        read_new_version "$message" UNITY_PACKAGE_VERSION
    fi
    UNITY_PACKAGE="$NETWORK_ADAPTERS_NAME-$MODE-$UNITY_PACKAGE_VERSION-$NETWORK_VERSION_SUFFIX.unitypackage"

    if [ "$DRY_RUN" = true ]; then
        printf "\nDry run; only printing values...\n"
        echo "NETWORK:                  " $NETWORK
        echo "NETWORK_ADAPTERS_NAME:    " $NETWORK_ADAPTERS_NAME
        echo
        echo "IOS_ADAPTER_DIR:          " $IOS_ADAPTER_DIR
        echo "IOS_EXPORT_DIR:           " $IOS_EXPORT_DIR
        echo "IOS_PODSPEC_FILE:         " $IOS_PODSPEC_FILE
        echo "IOS_ADAPTER_VERSION:      " $IOS_ADAPTER_VERSION
        echo "IOS_SDK_VERSION:          " $IOS_SDK_VERSION
        echo "IOS_ADAPTER_SPEC:         " $IOS_ADAPTER_SPEC
        echo
        echo "ANDROID_ADAPTER_JAR:      " $ANDROID_ADAPTER_JAR
        echo "ANDROID_EXPORT_DIR:       " $ANDROID_EXPORT_DIR
        echo "ANDROID_ADAPTER_VERSION:  " $ANDROID_ADAPTER_VERSION
        echo "ANDROID_SDK_VERSION:      " $ANDROID_SDK_VERSION
        echo
        echo "UNITY_SCRIPTS_DIR:        " $UNITY_SCRIPTS_DIR
        echo "UNITY_ADAPTER_CONFIG_FILE:" $UNITY_ADAPTER_CONFIG_FILE
        echo "UNITY_ADAPTER_DEPS_FILE:  " $UNITY_ADAPTER_DEPS_FILE
        echo "UNITY_PACKAGE_VERSION:    " $UNITY_PACKAGE_VERSION
        echo "UNITY_SCRIPTS_EXPORT_DIR: " $UNITY_SCRIPTS_EXPORT_DIR
        echo
        echo "UNITY_PACKAGE:            " $UNITY_PACKAGE
        echo
        continue
    fi

    if [ "$SELECTED_NETWORK" != All ]; then
        printf "\nAbout to export $UNITY_PACKAGE\n"
        read -p "Press 'Enter' to continue or 'Ctrl-C' to abort."
    fi

    if [ ! -d "$PROJECT_PATH" ]; then
        echo "Creating new project with the MoPub Unity SDK..."
        $UNITY_BIN -createProject "$PROJECT_PATH" -importPackage "$MOPUB_UNITY_PACKAGE" -quit -batchmode
    else
        echo "Importing latest MoPub Unity SDK..."
        $UNITY_BIN $PROJECT_PATH -importPackage "$MOPUB_UNITY_PACKAGE" -quit -batchmode
        echo "Clearing Assets/MoPub/Mediation dir..."
        rm -r "$PROJECT_PATH/Assets/MoPub/Mediation" 2> /dev/null
    fi

    if [ "$MODE" = stage ]; then
        echo "Copying platform adapter files..."
        mkdir -p "$PROJECT_PATH/$IOS_EXPORT_DIR"
        find "$IOS_ADAPTER_DIR" -type f -exec cp {} "$PROJECT_PATH/$IOS_EXPORT_DIR" \;
        validate
        mkdir -p "$PROJECT_PATH/$ANDROID_EXPORT_DIR"
        cp "$ANDROID_ADAPTER_JAR" "$PROJECT_PATH/$ANDROID_EXPORT_DIR/$NETWORK_ADAPTERS_NAME_LOWERCASE-$ANDROID_ADAPTER_VERSION.jar"
        validate
    fi
    
    echo "Adding unity adapter files..."
    mkdir -p "$PROJECT_PATH/$UNITY_SCRIPTS_EXPORT_DIR"
    cp "$UNITY_SCRIPTS_DIR/"* "$PROJECT_PATH/$UNITY_SCRIPTS_EXPORT_DIR/"
    validate

    if [ "$MODE" = stage ]; then
    	sed -i "" -e "/ANDROID_ADAPTER_VERSION/d" "$PROJECT_PATH/$UNITY_SCRIPTS_EXPORT_DIR/$UNITY_ADAPTER_DEPS_FILE"
    fi

    # Update Adapter and SDK version numbers in dependencies and adapter config
    sed -i "" -e "s/UNITY_PACKAGE_VERSION/$UNITY_PACKAGE_VERSION/" \
              -e "s/ANDROID_ADAPTER_VERSION/$ANDROID_ADAPTER_VERSION/" \
              -e "s/ANDROID_SDK_VERSION/$ANDROID_SDK_VERSION/" \
              -e "s/IOS_ADAPTER_VERSION/$IOS_ADAPTER_VERSION/" \
              -e "s/IOS_SDK_VERSION/$IOS_SDK_VERSION/" \
              -e "s#IOS_ADAPTER_SPEC#$IOS_ADAPTER_SPEC#" \
              $PROJECT_PATH/$UNITY_SCRIPTS_EXPORT_DIR/$UNITY_ADAPTER_DEPS_FILE \
              $PROJECT_PATH/$UNITY_SCRIPTS_EXPORT_DIR/$UNITY_ADAPTER_CONFIG_FILE
    validate

    # Generate Unity package
    echo "Exporting Unity package..."
    rm "$OUT_DIR/$NETWORK_ADAPTERS_NAME-$MODE"-*".unitypackage" 2> /dev/null
    EXPORT_DIRS="$UNITY_SCRIPTS_EXPORT_DIR"
    if [ "$MODE" = stage ]; then
    	EXPORT_DIRS="$IOS_EXPORT_DIR $ANDROID_EXPORT_DIR $EXPORT_DIRS"
    fi
    $UNITY_BIN -gvh_disable -projectPath "$PROJECT_PATH" -quit -batchmode -logFile -exportPackage $EXPORT_DIRS "$OUT_DIR/$UNITY_PACKAGE"
    validate
    echo "Exported $NETWORK_ADAPTERS_NAME ($EXPORT_DIRS) to $UNITY_PACKAGE"
done

if [ "$DRY_RUN" = true ]; then
    exit 0
fi

git add "$OUT_DIR"
GREEN='\033[0;32m'
NC='\033[0m' # No Color
echo -e "${GREEN}DONE EXPORTING UNITY PACKAGES!$NC"
echo "Test adapter updates via the updated sample app (under mopub-unity-sdk/) then commit and push these changes."
